Bash 
--------
mkdir - To create new folder (directory)
rmdir - to delete a folder (directory)
Ls - list files in folder
Ls -a - List all files in folder (including hidden files)
cd - change directory 
Touch - create new file 
Clear - to clear terminal and move cursor to the top of screen

Git
-------
Git init - initialize a new folder on git ( go to the path and use "git init")
Git status- check staging area for any recent added file
Git add <name of file> - used to add a file to staging area
Git add . - used to add all files to staging. ("." means everything)
Git rm --cached <name of file> - To remove file from staging area
- Git Commit
Git commit -m "Message" - To commit an index (First commit is usually called "initial commit")
Git config --global user.email "oriazowanemmanuel@gmail.com" - To configure Author's Email Address
Git config --global user.name "Emmanuel" - To configure Author's Name
Git commit --help - To find flags for git commit (information in the staging ares is called "index")
Git log - To check commit history

Head -> Main/Master shows the most recent and updated commit 

Git checkout <commit ID> - To check out an earlier version of the document (You can find the commit history using "git log")

Git checkout master/main - brings you back the main commit
Git reset --hard - reverts to an earlier commit and stays there as Master

Stay on task- Take a break-----need to replenish your spoons


Go back in time permanently - To go back to an initial commit permanently.
Git revert - It goes back in time to only one commit. It revert the changes and creates a new revert commit.

git reset --hard <Commit ID> - To hard reset the version to an earlier one

.gitignore- it's used for files and directories you do not want to track. Like autogenerated files.


-----------
GIT Branches
A branch is a chain of commits that are on a a separate timeline from the master, therefore they do not have conflicting timelines.
1. Git branches are a way to create a separate development path without overriding or creating copies of the project
2. Branches can be added, deleted and merged just like regular commits.
Uses
---
- Create separate development path
- separate end goal
- separate branch for bug fixing and other for feature development

Git checkout -b dev - switch to a new branch called dev
Git branch - a - list all the branches
Git branch dev - create a new branch called dev
Git checkout <branch name> - switch to branch
Git branch -d <branch name> - delete branch

Branch is used by enterprise project management because it allows you to breakup your work and reach goals in real time.

Merging branches

To merge a branch into the current branch

To merge a source branch to a target branch irrespective of the branch you are on.

-----------
Git Hub

It's an application that allows you to turn your local repo into a remote repo
It provides a user friendly platform to interact with and manage your repo

It allows you to:
Have a portfolio of your best work
Open opportunities you might not have with a local repo
Easy access from any device in any location
Industry standard for hosting git repository


Fork - creates a copy of an original repo under your own GitHub account

Clone - creates a local copy of the repo on your local machine

Download - Download the repo as a zip file


---------------------
Using Git Remotely
The section is to bring Git and Github skills together and make it live.

Create an empty repository on GitHub

Create an empty local directory

Initialize the local directory - git init

Copy the new repo link from GitHub

Git remote add origin <git hub repo link> - To connect the local repository to the remote repository

Git remote -v - to verify the remote repository is connected

To Pull

Git pull - to pull all the information from the remote repo


----------
Working with remote branches


